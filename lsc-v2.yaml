substitutions:
  device_name: lsc
  device_description: "LSC Wallpug"
  friendly_name: LSC Wallplug
  prj_version: "v1.00.1"
  
# GPIO - Old model with 1 led
#  button: "GPIO14"
#  led_blue: "GPIO4"
#  relay: "GPIO12"

# GPIO - New model with 2 leds
  button: "GPIO4"
  led_blue: "GPIO14"
  led_red: "GPIO13"
  relay: "GPIO5"

esphome:
  name: ${device_name}
  comment: "${device_description}" 
  name_add_mac_suffix: true
  project: 
    name: "lsc.smartplug"
    version: ${prj_version}

  platform: ESP8266
  board: esp01_1m
  on_boot:
    priority: -100
    then:
      # This setting will make the state off the relay on boot on
     - switch.toggle: relay_and_light
          
# Enable logging
logger:

# Enable Home Assistant API
api:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_name}

dashboard_import:
  package_import_url: github://Alexamder/LSC-outlet/lsc-v2.yaml@main

captive_portal:

binary_sensor:
  - platform: status
    name: "${name} Status"
  - platform: gpio
    name: "LSC Smart Connect Button"
    pin:
      number: ${button}
      mode: INPUT_PULLUP
      inverted: true
    internal: true   
    on_press:
      - switch.toggle: relay_and_light

output:
  - platform: esp8266_pwm
    id: led
    pin:
      number: ${led_blue}
      inverted: true

light:
  - platform: monochromatic
    id: status_led
    name: "LSC Smart Connect Led"
    output: led
    internal: true
    
switch:
  - platform: gpio
    id: relay
    pin: ${relay} 
  - platform: template
    name: ${name} 
    icon: "mdi:power-plug"
    optimistic: true
    id: relay_and_light
    turn_on_action:
      - switch.turn_on: relay
      - light.turn_on: status_led
    turn_off_action:
      - switch.turn_off: relay
      - light.turn_off: status_led  

time:
  - platform: homeassistant
    id: homeassistant_time

# Text sensors with general information.
text_sensor:
  # Expose ESPHome version as sensor.
  - platform: version
    name: Version
  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: IP
      icon: mdi:ip-network
    bssid:
      name: BSSID

  # human readable update text sensor from sensor:uptime
  - platform: template
    name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start  

sensor:  
  - platform: wifi_signal
    name: WiFi Signal
    update_interval: 60s

# human readable uptime sensor output to the text sensor above
  - platform: uptime
    name: Uptime in Days
    id: uptime_sensor_days
    internal: true
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor_days).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();
